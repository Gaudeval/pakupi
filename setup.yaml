---
- hosts: localhost
  tasks:
  - name: Retrieve reference date
    set_fact:
      ref_date: "{{ansible_date_time.iso8601}}"
- hosts: ghosts
  gather_facts: yes
  vars:
    speed: 30
  tasks:
  - name: Set date
    become: yes
    shell:
      cmd: date --set "{{hostvars['localhost']['ref_date']}}"

  # Initial setup
  - name: Install required base packages
    become: yes
    apt:
      name: "{{ packages }}"
    vars:
      packages:
        - vim
        - screen
        - raspberrypi-kernel-headers

  # Setup hostname
#  - name: Setup worker hostname
 #   become: yes
  #  hostname:
   #   name: "{{ inventory_hostname }}"

  # Mount shared filesystem
  - name: Look for shared filesystem mount point
    stat:
      path: "{{ nfs_configuration.mountpoint }}"
    register: nfs_directory

  - name: Create shared filesystem mount point
    become: yes
    file:
      state: directory
      path: "{{ nfs_configuration.mountpoint }}"
      mode: 0777
      recurse: yes
    when: not nfs_directory.stat.exists

  - name: Mount NFS share
    become: yes
    mount:
      state: mounted
      name: "{{ nfs_configuration.mountpoint }}"
      fstype: nfs
      opts: defaults,user
      src: "{{ nfs_configuration.server }}:{{ nfs_configuration.folder }}"

  - name: Automount NFS share on boot
    become: yes
    template:
      src: files/nfs-pakupi.mountpoint
      dest: /etc/systemd/system/nfs-pakupi.mountpoint
      owner: root
      group: root
      mode: 0644

  # Compile and load ccr module
  - name: Look for ccr module
    stat:
      path: "/lib/modules/{{ ansible_kernel }}/kernel/arch/arm/enable_ccr.ko"
    register: ccr_module

  - name: Create ccr build directory
    command: mktemp -d
    register: ccr_path
    when: not ccr_module.stat.exists

  - name: Push ccr module files
    copy:
      src: files/ccr-module
      dest: "{{ ccr_path.stdout }}"
      owner: pi
      group: pi
      mode: "u=rwx,g=r,o=r"
    when: not ccr_module.stat.exists

  - name: Push ccr module makefile
    template:
      src: files/ccr-module/Makefile.j2
      dest: "{{ ccr_path.stdout }}/ccr-module/Makefile"
    when: not ccr_module.stat.exists

  - name: Compile ccr module
    make:
      chdir: "{{ ccr_path.stdout }}/ccr-module"
    when: not ccr_module.stat.exists

  - name: Install ccr module
    become: yes
    copy:
      remote_src: yes
      src: "{{ ccr_path.stdout }}/ccr-module/enable_ccr.ko"
      dest: "/lib/modules/{{ ansible_kernel }}/kernel/arch/arm/enable_ccr.ko"
    when: not ccr_module.stat.exists

  - name: Update module dependencies
    become: yes
    command: depmod
    when: not ccr_module.stat.exists

  - name: Load module on boot
    become: yes
    lineinfile:
      dest: /etc/modules
      line: "enable_ccr"

  - name: Set user-level PMC on module load
    become: yes
    copy:
      src: files/enable_ccr.conf
      dest: /etc/modprobe.d/enable_ccr.conf
      owner: root
      group: root
      mode: 0644

  # Remove target cores from scheduler pool
  - name: Configure kernel command line parameters
    become: yes
    replace:
      dest: /boot/cmdline.txt
      regexp: 'rootwait$'
      replace: 'rootwait isolcpus=2,3 nosoftlockup skew_tick=1 nowatchdog'
       

  # Set cpu frequency in configuration
  - name: Set arm frequency
    become: yes
    lineinfile:
      dest: /boot/config.txt
      regexp: "^#?{{ item.name }}"
      line: "{{ item.name }}={{ item.value }}"
    with_items:
      - {name: "arm_freq", value: "600"}
      - {name: "min_arm_freq",  value: "600"}
      - {name: "force_turbo",  value: "1"}


  # Install python3.5 python3-venv python3-dev
  - name: Install required python packages
    become: yes
    apt:
      name: "{{ packages }}"
    vars:
      packages:
        - python3.5
        - python3-venv
        - python3-dev
        - python3-pip

  # Upgrade pip and setuptools to match new certificates
  - name : Upgrade pip python package
    pip:
      name: pip
      executable: pip3
      extra_args: "--proxy 172.24.254.254:8899"
      state: latest

  - name : Upgrade setuptools python package
    pip:
      name: pip
      executable: pip3
      extra_args: "--proxy 172.24.254.254:8899"
      state: latest

  # Setup compression ibrary
  - name: Install lz4 python package
    pip:
      name: lz4
      executable: pip3
      extra_args: "--proxy 172.24.254.254:8899"

  # Setup dask
  - name: Install dask python package
    pip:
      name: dask
      executable: pip3
      extra_args: "--proxy 172.24.254.254:8899"

  - name: Install distributed python package
    pip:
      name: distributed
      executable: pip3
      extra_args: "--proxy 172.24.254.254:8899"

  - name: Copy dask worker service script
    become: yes
    template:
      src: files/daskworker.service.j2
      dest: /etc/systemd/system/daskworker.service
      owner: root
      group: root
      mode: 0644

  - name: Activate and start daskworker daemon
    become: yes
    systemd:
      daemon_reload: yes
      name: daskworker.service
      state: started
      enabled: yes
      
  - name: Copy pakupi heartbeat service script
    become: yes
    template:
      src: files/heartbeat.service.j2
      dest: /etc/systemd/system/heartbeat.service
      owner: root
      group: root
      mode: 0644

  - name: Copy pakupi heartbeat script
    become: yes
    template:
      src: files/heartbeat.sh.j2
      dest: /home/{{ ansible_user }}/heartbeat.sh
      owner: "{{ ansible_user }}"
      group: "{{ ansible_user }}"
      mode: 0644

  - name: Activate and start pakupi heartbeat daemon
    become: yes
    systemd:
      daemon_reload: yes
      name: heartbeat.service
      state: started
      enabled: yes

  - name: Copy memory contender generator script
    become: yes
    template:
      src: files/gencontender.py
      dest: /usr/local/bin/gencontender
      owner: pi
      group: staff
      mode: 0744

  - name: Copy memory contender generator script
    become: yes
    copy:
      src: files/rowhammer.py
      dest: /usr/local/bin/gen-rowhammer
      owner: pi
      group: staff
      mode: 0744

  - name: Set user capability to set real-time priorities
    become: yes
    capabilities:
      path: /usr/bin/chrt
      capability: cap_sys_nice+ep
      state: present
