---
- hosts: pakupi_master
  become: yes
  tasks:
  - name: Gather facts from all hosts
    ansible.builtin.setup:
    delegate_to: "{{ item }}"
    delegate_facts: true
    loop: "{{ groups['all'] }}"
    ignore_unreachable: true
  - name: Build DHCP host list
    set_fact:
      dhcp_hosts: "{{ (dhcp_hosts | default([])) + [dhcp_host_template] }}"
    loop: "{{ groups['all'] }}"
  - name: Build DHCP default range configuration
    set_fact:
      dhcp_subnets:
      - ip: "{{ pakupi_network }}"
        netmask: "{{ pakupi_network_mask }}"
        range_begin: "{{ pakupi_dhcp_range.begin }}"
        range_end: "{{ pakupi_dhcp_range.end }}"
        domain_name_servers: "{{ pakupi_dhcp_dns }}"
        # TODO Check and set routers if gateway set
        # routers: "{{ pakupi_dhcp_gateway }}"
  - name: DBG
    debug:
      msg: "{{ dhcp_subnets }}"
  - name: Setup DHCP server
    include_role:
      name: bertvv.dhcp
  vars: 
    dhcp_host_template:
      name: "{{ item }}"
      mac: "{{  hostvars[item].ansible_facts[dict(hostvars[item].ansible_facts.interfaces | map('extract', hostvars[item].ansible_facts, ['ipv4', 'address']) | zip(hostvars[item].ansible_facts.interfaces))[hostvars[item].ansible_facts.all_ipv4_addresses | ansible.utils.ipaddr(pakupi_net) | first]].macaddress | default(hostvars[item].macaddress) }}"
      ip: "{{ hostvars[item].ansible_host }}"
      hostname: "{{ item }}.{{ pakupi_domain }}"
    pakupi_net: "{{ pakupi_network }}/{{ pakupi_network_mask }}"

